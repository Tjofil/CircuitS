var documenterSearchIndex = {"docs":
[{"location":"gui/#GUI-Extension","page":"GUI Extension","title":"GUI Extension","text":"","category":"section"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"CircuitS offers a simple graphical interface for creating simple circuits.","category":"page"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"This extension is optional and is not required to run CircuitS. Installation can be found here.","category":"page"},{"location":"gui/#Running","page":"GUI Extension","title":"Running","text":"","category":"section"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"GUI extension can be started by simply running the gui/main.py file:","category":"page"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"python gui/main.py","category":"page"},{"location":"gui/#Features","page":"GUI Extension","title":"Features","text":"","category":"section"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"Main window is composed of three sections:","category":"page"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"Menu bar\nToolbar\nDrawing canvas","category":"page"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"(Image: gui)","category":"page"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"Toolbar has the following features, in order:","category":"page"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"Creating a new circuit - clears the canvas\nSaving the current circuit localy (.circS Files)\nLoading a saved CircuitS file\nRunning the simulator\nHelp dialog\nDrawing lines to connect the elements\nErasing elements on the canvas\nAdding elements on the canvas: Resistors, Capacitors, Inductors, Impedance, Admittance, Voltage generators, Current generators, Ground","category":"page"},{"location":"gui/#Creating-a-circuit","page":"GUI Extension","title":"Creating a circuit","text":"","category":"section"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"Let's create a simple voltage divider by adding elements and connecting them with lines:","category":"page"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"(Image: gui)","category":"page"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"info: Ground\nEvery circuit should have at least one ground element on the canvas.","category":"page"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"info: Rotation\nWe can also rotate elements by hovering our mouse over them in the canvas and pressing \"R\" on the keyboard.","category":"page"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"To run the simulation we can go to simulate->run. If CircuitS is not in the same directory as the gui script, then we need to find it on the filesystem.","category":"page"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"Results of MNA equations are displayed in the same simulation window.","category":"page"},{"location":"gui/","page":"GUI Extension","title":"GUI Extension","text":"Each element has two terminals (nodes) that can be seen by pressing on the element in the canvas.","category":"page"},{"location":"functions/#header_functions","page":"CircuitS Functions","title":"CircuitS Functions","text":"","category":"section"},{"location":"functions/","page":"CircuitS Functions","title":"CircuitS Functions","text":"Following is a list of all provided CircuitS functions.","category":"page"},{"location":"functions/#Creating-a-circuit","page":"CircuitS Functions","title":"Creating a circuit","text":"","category":"section"},{"location":"functions/","page":"CircuitS Functions","title":"CircuitS Functions","text":"create_circuit\r\nadd_element\r\nremove_element","category":"page"},{"location":"functions/#create_circuit","page":"CircuitS Functions","title":"create_circuit","text":"circuit = create_circuit()\n\nCreates and returns an empty circuit object.\n\n\n\n\n\n","category":"function"},{"location":"functions/#add_element","page":"CircuitS Functions","title":"add_element","text":"add_element(elem::Vector, circuit::Circuit)\n\nAdds an element to the circuit. \n\nArguments\n\nelem::Vector: Element to be added. Elements are given in specific formats:\n[type, id, a, b]\n[type, id, a, b, IC]\n[type, id, [a1,a2], b]\n[type, id, [a1,a2], [b1,b2]]\n[type, id, [a1,a2], [b1,b2], IC]\nDetails of each element are found in the docs.\ncircuit::Circuit: the circuit object to which the element will be added to\n\nExamples\n\nadd_element([Resistor, \"R1\", 1, 0], circuit)\nadd_element([Voltage, \"V1\", 1, 0], circuit)\n\n\n\n\n\n","category":"function"},{"location":"functions/#remove_element","page":"CircuitS Functions","title":"remove_element","text":"remove_element(elem::String, circuit::Circuit)\n\nRemoves an element with given id elem from the circuit.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"CircuitS Functions","title":"CircuitS Functions","text":"For a full list of supported elements go to Elements section.","category":"page"},{"location":"functions/#Getters","page":"CircuitS Functions","title":"Getters","text":"","category":"section"},{"location":"functions/","page":"CircuitS Functions","title":"CircuitS Functions","text":"get_equations\r\nget_variables","category":"page"},{"location":"functions/#get_equations","page":"CircuitS Functions","title":"get_equations","text":"get_equations(circuit::Circuit)\n\nReturns a list of MNA equations with applied replacements.\n\nArguments\n\ncircuit::Circuit: Initialized circuit\n\nReturns\n\nresult::Vector: A list of all equations\n\nExamples\n\nresult = get_equations(circuit);\n\n\n\n\n\n","category":"function"},{"location":"functions/#get_variables","page":"CircuitS Functions","title":"get_variables","text":"get_variables(circuit::Circuit)\n\nReturns a list of MNA variables - symbols for node potentials and some currents.\n\nArguments\n\ncircuit::Circuit: Initialized circuit\n\nReturns\n\nresult::Vector: A list of all variables\n\nExamples\n\nresult = get_variables(circuit);\n\n\n\n\n\n","category":"function"},{"location":"functions/#Simulation","page":"CircuitS Functions","title":"Simulation","text":"","category":"section"},{"location":"functions/","page":"CircuitS Functions","title":"CircuitS Functions","text":"Before every simulation, a circuit has to be initialized in order to create MNA equations and make the necessary replacements.","category":"page"},{"location":"functions/","page":"CircuitS Functions","title":"CircuitS Functions","text":"init_circuit","category":"page"},{"location":"functions/#init_circuit","page":"CircuitS Functions","title":"init_circuit","text":"init_circuit(circuit::Circuit, replacements::Dict, omega::String=\"\")\n\nPrepares the circuit for simulation. Circuits have to be initialized before the simulation every time a new element is added.\n\nArguments\n\ncircuit::Circuit: A circuit to be initialized\nreplacements::Dict: Dictionary of replacements in the circuit, given in format: Dict([ R1 => R, R2 => R, ...])\nR1, R2 and R are symbols\nomega::String: A replacement for s=j*omega\n\nnote: Note\nIf given, omega has to be a single symbol, given as a string. It can be replaced by a complex term in replacements::Dict.\n\nExamples\n\n@variables R1, R2, R\ninit_circuit(circuit, Dict([ R1 => R, R2 => R]);\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"CircuitS Functions","title":"CircuitS Functions","text":"simulate","category":"page"},{"location":"functions/#simulate","page":"CircuitS Functions","title":"simulate","text":"simulate(circuit::Circuit, simpl::Bool = true)\n\nSimulates the circuit by calculating node potentials and some currents (MNA).\n\nArguments\n\ncircuit::Circuit: A circuit to be simulated\nsimpl::Bool = true: Flag indicating whether to simplify the resulting equations\n\nReturns\n\nresult::Dict: A dictionary of all calculated potentials and currents\n\nExamples\n\nresult = simulate(circuit);\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"CircuitS Functions","title":"CircuitS Functions","text":"warning: Limitations\nDue to limitations of simplify function in JuliaSymbolics, some more complex circuits will fail to simulate and throw Assertation Error. This can be avoided by passing false as a second argument to simulate function, but then the resulting equations may be impossible to read.Simplify and solve_for functions are also relatively slower than those similar in other languages. It is not uncommon for these functions to take minutes to finish.These limitations will be illustrated through examples in the following sections.","category":"page"},{"location":"integrator/#Integrator","page":"Integrator","title":"Integrator","text":"","category":"section"},{"location":"integrator/#Circuit-description","page":"Integrator","title":"Circuit description","text":"","category":"section"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"An integrator in measurement and control applications is an element whose output signal is the time integral of its input signal. It accumulates the input quantity over a defined time to produce a representative output.","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"(Image: opamp)","category":"page"},{"location":"integrator/#Goals","page":"Integrator","title":"Goals","text":"","category":"section"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"Calculate integrator response\nCalculate integrator response for R1=R2=R3=R","category":"page"},{"location":"integrator/#Modeling-the-circuit","page":"Integrator","title":"Modeling the circuit","text":"","category":"section"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"First we include Symbolics.jl and CircuitS.","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"using Symbolics\r\ninclude(\"../CircuitS.jl\")","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"The we create the circuit and add all of the elements as shown in the picture above:","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"circuit = create_circuit()\r\nadd_element([Resistor, \"R1\", 1, 3], circuit)\r\nadd_element([Resistor, \"R2\", 4, 5], circuit)\r\nadd_element([Resistor, \"R3\", 5, 2], circuit)\r\nadd_element([Capacitor, \"C\", 3, 4, \"U0\"], circuit)\r\nadd_element([Voltage, \"Ug\", 1, 0], circuit)\r\nadd_element([OpAmp, \"OpAmp1\", [3, 0], 2], circuit)\r\nadd_element([OpAmp, \"OpAmp2\", [0, 5], 4], circuit)","category":"page"},{"location":"integrator/#Simulation","page":"Integrator","title":"Simulation","text":"","category":"section"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"After we've built everything, we initialise and simulate the circuit:","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"init_circuit(circuit)\r\nresult = simulate(circuit)\r\n\r\nprintln(result)","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"Dict{Any, Any} with 8 entries:\r\n  \"V5\"       => 0\r\n  \"V3\"       => 0\r\n  \"V2\"       => (R3*Ug + C*R1*R3*U0) / (C*R1*R2*s)\r\n  \"I_OpAmp2\" => (-Ug - C*R1*U0 - C*R2*Ug*s) / (-C*R1*R2*s)\r\n  \"V4\"       => (-Ug - C*R1*U0) / (C*R1*s)\r\n  \"I_Ug\"     => Ug / (-R1)\r\n  \"I_OpAmp1\" => (-Ug - C*R1*U0) / (C*R1*R2*s)\r\n  \"V1\"       => Ug","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"Integrator response is the voltage of node 2:","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"println(result[\"V2\"])","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"(R3*Ug + C*R1*R3*U0) / (C*R1*R2*s)","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"We can replace replace R1=R2=R3=R the classic way, before the simulation:","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"@variables R1 R2 R3 R\r\ninit_circuit(circuit, Dict([R1=>R, R2=>R, R3=>R]))\r\nresult = simulate(circuit)\r\n\r\nprintln(result[\"V2\"])","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"(Ug + C*R*U0) / (C*R*s)","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"Or we can do it post simulation with JuliaSymbolics substitute function:","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"init_circuit(circuit)\r\nresult = simulate(circuit)\r\n\r\n@variables R1 R2 R3 R\r\nV2 = result[\"V2\"]\r\nV2 = SymbolicUtils.substitute(V2~0,Dict([R1=>R, R2=>R, R3=>R]))\r\nV2 = simplify(V2, expand=true)\r\nprintln(V2)","category":"page"},{"location":"integrator/","page":"Integrator","title":"Integrator","text":"info: Recommendations\nWe recommend applying the replacements before the simulation as it makes the MNA equations less complex and it decreases the chances of JuliaSymbolics simplify failure.","category":"page"},{"location":"instalation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"instalation/#Julia-dependances","page":"Installation","title":"Julia dependances","text":"","category":"section"},{"location":"instalation/","page":"Installation","title":"Installation","text":"CircuitS was built and tested with, at the time, latest Julia release 1.7.1, which can be obtained at Julia’s official website.","category":"page"},{"location":"instalation/","page":"Installation","title":"Installation","text":"CircuitS uses JuliaSymbolics as a lone, third-party module. Symbolics.jl is a fast and modern Computer Algebra System (CAS), with a goal to have a high-performance and parallelized symbolic algebra system that is directly extendable in the same language as the users.","category":"page"},{"location":"instalation/","page":"Installation","title":"Installation","text":"To install Symbolics.jl, use the Julia package manager:","category":"page"},{"location":"instalation/","page":"Installation","title":"Installation","text":"julia> import Pkg\r\njulia> Pkg.add(\"Symbolics\")\r\njulia> Pkg.add(\"SymbolicUtils\")","category":"page"},{"location":"instalation/","page":"Installation","title":"Installation","text":"note: Long installation\nInstallation process may take a long time to finish, as the library itself has a long list of other dependencies to install.If any errors occur during this process, we recommend checking the Symbolics.jl Github page","category":"page"},{"location":"instalation/#Testing","page":"Installation","title":"Testing","text":"","category":"section"},{"location":"instalation/","page":"Installation","title":"Installation","text":"To confirm that everything was installed successfully, inside julia interpreter try importing the library, and defining a few symbols:","category":"page"},{"location":"instalation/","page":"Installation","title":"Installation","text":"julia> using Symbolics\r\njulia> @variables a b c","category":"page"},{"location":"instalation/#install_gui","page":"Installation","title":"GUI Extension","text":"","category":"section"},{"location":"instalation/","page":"Installation","title":"Installation","text":"CircuitS offers a GUI extension for its circuit solver, which provides a simple, user-friendly interface for creating and modifying electric circuits.","category":"page"},{"location":"instalation/","page":"Installation","title":"Installation","text":"GUI Extension is written in Python 3.6 using the standard built-in module for Graphic design – Tkinter, and two external modules - pillow for image processing and - julia for communicating with julia interpreter. Apart from Python itself, which can be downloaded on Python’s official website, these two modules can be installed using python package installer pip:","category":"page"},{"location":"instalation/","page":"Installation","title":"Installation","text":"pip install pillow julia","category":"page"},{"location":"instalation/","page":"Installation","title":"Installation","text":"After the installation process, a one-time configuration for Julia communication is required. This can be done by opening a python interpreter and running:","category":"page"},{"location":"instalation/","page":"Installation","title":"Installation","text":"import julia\r\njulia.install()","category":"page"},{"location":"instalation/","page":"Installation","title":"Installation","text":"To confirm everything was installed successfully, we can try evaluating Julia code inside the python interpreter:","category":"page"},{"location":"instalation/","page":"Installation","title":"Installation","text":"from julia import Main\r\nMain.eval(\"2+2\")","category":"page"},{"location":"elements/#header_elements","page":"Circuit Elements","title":"Circuit Elements","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Following is a list of all supported elements:","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Pages=[\"elements.md\"]\r\nDepth=4","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Elements are added to the circuit by the add_element function described in this section. Each element has a unique id given as a second parameter. The following list specifies parameters for each element.","category":"page"},{"location":"elements/#One-port-elements","page":"Circuit Elements","title":"One-port elements","text":"","category":"section"},{"location":"elements/#Resistor","page":"Circuit Elements","title":"Resistor","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Passive electrical component that implements electrical resistance as a circuit element. Described by its Resistance R and connecting nodes.","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: R)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[Resistor, id, nodeA, nodeB]\r\n// example\r\n[Resistor, \"R1\", 1, 0]","category":"page"},{"location":"elements/#Capacitor","page":"Circuit Elements","title":"Capacitor","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Passive electrical component that stores electrical energy in an electric field. Described by its capacitance C, connecting nodes and initial voltage U0.","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"U0 is optional and can be omitted.","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: C)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[Capacitor, id, nodeA, nodeB, U]\r\n// example\r\n[Capacitor, \"C1\", 1, 0]\r\n[Capacitor, \"C1\", 1, 0, \"U0\"]","category":"page"},{"location":"elements/#Inductor","page":"Circuit Elements","title":"Inductor","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Passive electrical component that stores energy in a magnetic field when electric current flows through it. Described by its inductance L, connecting nodes and initial current I0.","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"I0 is optional and can be omitted.","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: L)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[Inductor, id, nodeA, nodeB, I]\r\n// example\r\n[Inductor, \"L1\", 1, 0]\r\n[Inductor, \"L1\", 1, 0, \"I0\"]","category":"page"},{"location":"elements/#Impedance","page":"Circuit Elements","title":"Impedance","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Opposition to alternating current presented by the combined effect of resistance and reactance in a circuit. Described by impedance Z and connecting nodes.","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: Z)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[Impedance, id, nodeA, nodeB]\r\n// example\r\n[Impedance, \"Z1\", 1, 0]","category":"page"},{"location":"elements/#Admittance","page":"Circuit Elements","title":"Admittance","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Measure of how easily a circuit or device will allow a current to flow. It is defined as the reciprocal of impedance. Described by admittance Y and connecting nodes.","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: Y)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[Admitance, id, nodeA, nodeB]\r\n// example\r\n[Admitance, \"Y1\", 1, 0]","category":"page"},{"location":"elements/#Ideal-Voltage-Source","page":"Circuit Elements","title":"Ideal Voltage Source","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Active element with the property that the voltage across the terminals is specified at every instant in time. Described by voltage V and connecting nodes.","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: V)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[Voltage, id, nodeA, nodeB]\r\n// example\r\n[Voltage, \"Ug\", 1, 0]","category":"page"},{"location":"elements/#Ideal-Current-Source","page":"Circuit Elements","title":"Ideal Current Source","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Active element which supplies constant current irrespective of load resistance. Described by current I and connecting nodes.","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: I)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[Current, id, nodeA, nodeB]\r\n// example\r\n[Current, \"Ig\", 1, 0]","category":"page"},{"location":"elements/#Two-port-elements","page":"Circuit Elements","title":"Two port elements","text":"","category":"section"},{"location":"elements/#Operational-Amplifier","page":"Circuit Elements","title":"Operational Amplifier","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Differential amplifier with infinite open loop gain, infinite input resistance and zero output resistance. Defined by its three connecting nodes.","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: OpAmp)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[OpAmp, id, [nodeA, nodeB], nodeC ]\r\n// example\r\n[OpAmp, \"OpAmp1\", [1, 0], 2 ]","category":"page"},{"location":"elements/#Two-port-element-(ABCD-parameters)","page":"Circuit Elements","title":"Two port element (ABCD parameters)","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Electric element defined by its ABCD parameters.","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"beginbmatrix V_1  I_1 endbmatrix  =  beginbmatrix A  B  C  D endbmatrix beginbmatrix V_2  I_2 endbmatrix","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: ABCD)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[ABCD, id, [nodeA, nodeB], [nodeC, nodeD], [A, B, C, D] ]\r\n// example\r\n[ABCD, \"OpAmp1\", [1, 0], [2, 3], [\"A\", \"B\", \"C\", \"D\"] ]","category":"page"},{"location":"elements/#Controlled-Sources","page":"Circuit Elements","title":"Controlled Sources","text":"","category":"section"},{"location":"elements/#VCVS-(Voltage-controlled-Voltage-source)","page":"Circuit Elements","title":"VCVS (Voltage-controlled Voltage-source)","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Electric element that will keep the source voltage proportional to the controlling voltage regardless of what else is connected to the source. Defined by its connecting nodes and voltage gain. ","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: VCVS)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[VCVS, id, [nodeA, nodeB], [nodeC, nodeD], voltageGain ]\r\n// example\r\n[VCVS, \"VCVS1\", [1, 0], [2, 3], \"a\" ]","category":"page"},{"location":"elements/#VCCS-(Voltage-controlled-Current-source)","page":"Circuit Elements","title":"VCCS (Voltage-controlled Current-source)","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Electric element that will keep the current at the source proportional to the controlling voltage regardless of what else is connected to the source. Defined by its connecting nodes and transconductance. ","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: VCCS)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[VCCS, id, [nodeA, nodeB], [nodeC, nodeD], transconductance ]\r\n// example\r\n[VCCS, \"VCCS1\", [1, 0], [2, 3], \"g\" ]","category":"page"},{"location":"elements/#CCVS-(Current-controlled-Voltage-source)","page":"Circuit Elements","title":"CCVS (Current-controlled Voltage-source)","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Electric element that will keep the voltage proportional to the current controlling it regardless of what else is connected to the source. Defined by its connecting nodes and transresistance. ","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: CCVS)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[CCVS, id, [nodeA, nodeB], [nodeC, nodeD], transresistance ]\r\n// example\r\n[CCVS, \"CCVS1\", [1, 0], [2, 3], \"m\" ]","category":"page"},{"location":"elements/#CCCS-(Current-controlled-Current-source)","page":"Circuit Elements","title":"CCCS (Current-controlled Current-source)","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Electric element that will keep the current at the source proportional to the current controlling it regardless of what else is connected to the source. Defined by its connecting nodes and current gain. ","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: CCCS)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[CCCS, id, [nodeA, nodeB], [nodeC, nodeD], currentGain ]\r\n// example\r\n[CCCS, \"CCCS1\", [1, 0], [2, 3], \"a\" ]","category":"page"},{"location":"elements/#Transformers","page":"Circuit Elements","title":"Transformers","text":"","category":"section"},{"location":"elements/#Ideal-Transformer","page":"Circuit Elements","title":"Ideal Transformer","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Linear transformer that is lossless and perfectly coupled. Defined by its connecting nodes and turn ratio.","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: IdealT)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[IdealT, id, [nodeA, nodeB], [nodeC, nodeD], turnRatio ]\r\n// example\r\n[IdealT, \"IdealT1\", [1, 0], [2, 3], \"m\" ]","category":"page"},{"location":"elements/#Inductive-Transformer","page":"Circuit Elements","title":"Inductive Transformer","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Time invariant element without loss built with coupled coils. Defined by its connecting nodes, coil ids L1_id, L2_id, L12_id and optional initial currents I_01, I_02","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: InductiveT)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[InductiveT, id, [nodeA, nodeB], [nodeC, nodeD], [L1_id, L2_id, L12_id], [I_01, I_02] ]\r\n// example\r\n[InductiveT, \"InductiveT\", [1, 0], [2, 3], [\"L1\", \"L2\", \"L12\"] ]","category":"page"},{"location":"elements/#Transmission-lines","page":"Circuit Elements","title":"Transmission lines","text":"","category":"section"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"Specialized cable or other structure designed to conduct electromagnetic waves in a contained manner. The term applies when the conductors are long enough that the wave nature of the transmission must be taken into account. Defined by its id, connecting nodes, Zc and electrical length theta (Phasor transform) or delay tau (Laplace transform)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"(Image: TransmissionLine)","category":"page"},{"location":"elements/","page":"Circuit Elements","title":"Circuit Elements","text":"[TransmissionLine, id, [nodeA, nodeB], [nodeC, nodeD], [Zc, theta/tau] ]\r\n// example\r\n[TransmissionLine, \"T1\", [1, 0], [2, 3], [\"Z0\", \"t\"] ]","category":"page"},{"location":"opamp/#Operational-Amplifier","page":"Operational Amplifier","title":"Operational Amplifier","text":"","category":"section"},{"location":"opamp/#Circuit-description","page":"Operational Amplifier","title":"Circuit description","text":"","category":"section"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"A non-inverting op amp is an operational amplifier circuit with an output voltage that is in phase with the input voltage. Its complement is the inverting op amp, which produces an output signal that is 180 degrees out of phase.","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"(Image: opamp)","category":"page"},{"location":"opamp/#Goals","page":"Operational Amplifier","title":"Goals","text":"","category":"section"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"Calculate the output voltage of Operational amplifier U\nCalculate the aplification gain of Op Amp as fracUUg\nCalculate the power of Op Amp as I_OpAmp*U\nCalculate the power of R3","category":"page"},{"location":"opamp/#Modeling-the-circuit","page":"Operational Amplifier","title":"Modeling the circuit","text":"","category":"section"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"First we include Symbolics.jl and CircuitS.","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"using Symbolics\r\ninclude(\"../CircuitS.jl\")","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"Then we create the circuit and add all of the elements as shown in the picture above:","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"circuit = create_circuit()\r\nadd_element([Resistor, \"R1\", 0, 2], circuit)\r\nadd_element([Resistor, \"R2\", 2, 3], circuit)\r\nadd_element([Resistor, \"R3\", 0, 3], circuit)\r\nadd_element([Resistor, \"R4\", 4, 1], circuit)\r\nadd_element([Voltage, \"Ug\", 4, 0], circuit)\r\nadd_element([OpAmp, \"OpAmp\", [1, 2], 3], circuit)","category":"page"},{"location":"opamp/#Simulation","page":"Operational Amplifier","title":"Simulation","text":"","category":"section"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"After we've built everything, we initialise and simulate the circuit:","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"init_circuit(circuit)\r\nresult = simulate(circuit)\r\n\r\nprintln(result)","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"Dict{Any, Any} with 6 entries:\r\n  \"V3\"      => (Ug*(R1 + R2)) / R1\r\n  \"V2\"      => Ug\r\n  \"V4\"      => Ug\r\n  \"I_Ug\"    => 0\r\n  \"I_OpAmp\" => (Ug*(-R1 - R2 - R3)) / (R1*R3)\r\n  \"V1\"      => Ug","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"The output voltage of the operational amplifier is the voltage of node 3, so we can just print it from the result:","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"println(result[\"V3\"])","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"(Ug*(R1 + R2)) / R1","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"For the amplification gain, we can simply divide the voltage V3 by Ug, but we first need to define Ug as a symbol, so we can do calculations with it:","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"@variables Ug\r\nA = result[\"V3\"]/Ug\r\nprintln(A)","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"(R1 + R2) / R1","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"We can calculate the power of OpAmp as V3*I_OpAmp","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"P1 = result[\"V3\"]*result[\"I_OpAmp\"]\r\nprintln(P1)","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"((R1 + R2)*(-R1 - R2 - R3)*(Ug^2)) / (R3*(R1^2))","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"And for R3 as fracV3^2R3","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"@variables R3\r\nP2 = (result[\"V3\"]^2)/R3\r\nprintln(P2)","category":"page"},{"location":"opamp/","page":"Operational Amplifier","title":"Operational Amplifier","text":"(((Ug*(R1 + R2)) / R1)^2) / R3","category":"page"},{"location":"building/#Building-a-circuit","page":"Building a circuit","title":"Building a circuit","text":"","category":"section"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"In this section it will be demonstrated how to build a simple circuit and parse the results. ","category":"page"},{"location":"building/#Circuit-description","page":"Building a circuit","title":"Circuit description","text":"","category":"section"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"Voltage divider (also known as a potential divider) is a passive linear circuit that produces an output voltage that is a fraction of its input voltage. Voltage division is the result of distributing the input voltage among the components of the divider. A simple example of a voltage divider is two resistors connected in series, with the input voltage applied across the resistor pair and the output voltage emerging from the connection between them.","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"(Image: voltageDiv)","category":"page"},{"location":"building/#Modeling-the-circuit","page":"Building a circuit","title":"Modeling the circuit","text":"","category":"section"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"First let's create a new Julia file and include the Symbolics library as well as the CircuitS file. You can also simply open a julia interpreter and follow along the way.","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"using Symbolics\r\ninclude(\"CircuitS.jl\")","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"info: Same directory\nMake sure that the CircuitS.jl file is in the same directory, or alternatively you can use an absolute path of the CircuitS.jl file.","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"Now let's create the circuit by adding elements as shown in the picture.","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"circuit = create_circuit()\r\nadd_element([Resistor, \"R1\", 2, 0], circuit)\r\nadd_element([Resistor, \"R2\", 1, 2], circuit)\r\nadd_element([Voltage, \"Ug\", 1, 0], circuit)","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"info: Replacements\nIf we wanted to have the same symbols for both resistors, we can't just put R as id in both elements because those have to be unique. Instead, we have to pass the replacement symbols when we initialize the circuit equations:@variables R1 R2 R\r\ninit_circuit(circuit, Dict([R1=>R, R2=>R]) )","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"Now all that is left is to initialize the circuit and run the simulation:","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"init_circuit(circuit)\r\nresult = simulate(circuit)\r\n\r\nprintln(result)","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"Which should output the following response:","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"Dict{Any, Any} with 3 entries:\r\n  \"V2\"   => (-R1*Ug) / (-R1 - R2)\r\n  \"I_Ug\" => Ug / (-R1 - R2)\r\n  \"V1\"   => Ug","category":"page"},{"location":"building/#Parsing-the-results","page":"Building a circuit","title":"Parsing the results","text":"","category":"section"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"In previous steps we stored our simulation results in a variable called result, which is a dictionary key=>value where key is a node potential or some branch current.","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"If we want to get a list of everything that has been calculated we can simply collect all the keys in a vector or use get_variables function:","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"vars = collect(keys(result))\r\nprintln(vars)\r\n\r\nvars = get_variables(circuit)\r\nprintln(vars)","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"3-element Vector{Num}:\r\n   V1\r\n   V2\r\n I_Ug","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"info: Note\nFor get_variables function we don't need to simulate the circuit, only initialize it.","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"We can also use these calculated equations for further processing. Let's say we want to find the voltage across R1. We can do this by subtracting node potentials of V1 and V2 or vice versa.","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"U1 = result[\"V1\"] - result[\"V2\"]\r\nprintln(U1)","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"Ug + (R1*Ug) / (-R1 - R2)","category":"page"},{"location":"building/#Printing-the-results","page":"Building a circuit","title":"Printing the results","text":"","category":"section"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"Unfortunately, the console window can't print latex equations, but we can generate latex code and display it in an environment that does support printing.","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"To print latex code, we need another library latexify.jl (docs):","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"julia> import Pkg\r\njulia> Pkg.add(\"Latexify\")","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"Then simply call the function latexify(eq), to obtain latex equivalent of the equation eq:","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"using Latexify\r\nprint(latexify(result[\"V2\"]))","category":"page"},{"location":"building/","page":"Building a circuit","title":"Building a circuit","text":"\\begin{equation}\r\n\\frac{ - R1 Ug}{ - R1 - R2}\r\n\\end{equation}","category":"page"},{"location":"inampt/#MNA-Equations","page":"MNA Equations","title":"MNA Equations","text":"","category":"section"},{"location":"inampt/#Circuit-description","page":"MNA Equations","title":"Circuit description","text":"","category":"section"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"An inverting amplifier (also known as an inverting operational amplifier or an inverting op-amp) is a type of operational amplifier circuit which produces an output which is out of phase with respect to its input by 180 degrees.","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"(Image: opamp)","category":"page"},{"location":"inampt/#Goals","page":"MNA Equations","title":"Goals","text":"","category":"section"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"Get the MNA quations and variables\nCalculate the aplification gain of OpAmp as fracUUg\nCalculate the power of OpAmp as I_OpAmp*U\nCalculate the power of R6","category":"page"},{"location":"inampt/#Modeling-the-circuit","page":"MNA Equations","title":"Modeling the circuit","text":"","category":"section"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"First we include Symbolics.jl and CircuitS.","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"using Symbolics\r\ninclude(\"../CircuitS.jl\")","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"warning: Assertation error\nUnfortunately, due to a simplifying issue inside the JuliaSymbolics library, we cannot solve the given circuit with simplify=true parameter for simulate function (the parameter is set to true by default).As an alternative, we will use conductance G to describe resistors instead of resistance R. This can be achieved by using admitance elements instead of resistors. This helps the problem as it makes MNA equations less complex.","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"note: Not simplifying the result\nIf we chose to pass simplify=false to the solve function, results will end up being unreadable.","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"We create the circuit and add all of the elements as shown in the picture above, but replace the resistance with conductance:","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"circuit = create_circuit()\r\nadd_element([Admitance, \"G1\", 1, 2], circuit)\r\nadd_element([Admitance, \"G2\", 2, 3], circuit)\r\nadd_element([Admitance, \"G6\", 3, 0], circuit)\r\nadd_element([Voltage, \"Ug\", 1, 0], circuit)\r\nadd_element([OpAmp, \"OpAmp\", [0, 2], 3], circuit)","category":"page"},{"location":"inampt/#Simulation","page":"MNA Equations","title":"Simulation","text":"","category":"section"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"After we've built everything, we initialise and simulate the circuit:","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"init_circuit(circuit)\r\nresult = simulate(circuit)\r\n\r\nprintln(result)","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"Dict{Any, Any} with 5 entries:\r\n  \"V3\"      => (-G1*Ug) / G2\r\n  \"V2\"      => 0\r\n  \"I_Ug\"    => -G1*Ug\r\n  \"I_OpAmp\" => (-G1*Ug*(G2 + G6)) / (-G2)\r\n  \"V1\"      => Ug","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"To get the full list of MNA equations and variables (node potentials and some currents) we can use get_equations and get_variables functions:","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"equations = get_equations(circuit)\r\nprintln(equations)\r\n\r\nvariables = get_variables(circuit)\r\nprintln(variables)","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"5-element Vector{Num}:\r\n           I_Ug + G1*V1 - G1*V2\r\n   V2*(G1 + G2) - G1*V1 - G2*V3\r\n I_OpAmp + V3*(G2 + G6) - G2*V2\r\n                        V1 - Ug\r\n                            -V2\r\n\r\n5-element Vector{Num}:\r\n      V1\r\n      V2\r\n      V3\r\n    I_Ug\r\n I_OpAmp","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"note: Implication\nEquations are implicitly equal to 0","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"Unfortuantely, as discussed before we cannot print them in latex inside the console window.","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"For the amplification gain, we can simply divide the voltage V3 by Ug, but we first need to define Ug as a symbol, so we can do calculations with it:","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"@variables Ug\r\nA = result[\"V3\"]/Ug\r\nprintln(A)","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"(-G1) / G2","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"Amplification gain is negative, so we know its an inverting Op Amp.","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"We can calculate the power of OpAmp as V3*I_OpAmp","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"P1 = result[\"V3\"]*result[\"I_OpAmp\"]\r\nprintln(P1)","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"((G1^2)*(G2 + G6)*(Ug^2)) / (-(G2^2))","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"And for R3 as fracV3^2R6","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"@variables R6\r\nP2 = (result[\"V3\"]^2)/R6\r\nprintln(P2)","category":"page"},{"location":"inampt/","page":"MNA Equations","title":"MNA Equations","text":"(((-G1*Ug) / G2)^2) / R6","category":"page"},{"location":"vod/#Transmission-line","page":"Transmission line","title":"Transmission line","text":"","category":"section"},{"location":"vod/#Circuit-description","page":"Transmission line","title":"Circuit description","text":"","category":"section"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"In electrical engineering, a transmission line is a specialized cable or other structure designed to conduct electromagnetic waves in a contained manner. The term applies when the conductors are long enough that the wave nature of the transmission must be taken into account.","category":"page"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"(Image: opamp)","category":"page"},{"location":"vod/#Goals","page":"Transmission line","title":"Goals","text":"","category":"section"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"Calculate current of L1\nCalculate voltage across L1","category":"page"},{"location":"vod/#Modeling-the-circuit","page":"Transmission line","title":"Modeling the circuit","text":"","category":"section"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"First we include Symbolics.jl and CircuitS.","category":"page"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"using Symbolics\r\ninclude(\"../CircuitS.jl\")","category":"page"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"The we create the circuit and add all of the elements as shown in the picture above:","category":"page"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"circuit = create_circuit()\r\nadd_element([Resistor, \"R1\", 1, 3], circuit)\r\nadd_element([Inductor, \"L1\", 0, 2], circuit)\r\nadd_element([Voltage, \"Ug\", 3, 0], circuit)\r\nadd_element([TransmissionLine, \"T\", [1, 0], [2,0], [\"Zc\", \"t\"] ], circuit)","category":"page"},{"location":"vod/#Simulation","page":"Transmission line","title":"Simulation","text":"","category":"section"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"After we've built everything, we initialise and simulate the circuit:","category":"page"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"init_circuit(circuit)\r\nresult = simulate(circuit, false)\r\n\r\nprintln(result)","category":"page"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"warning: AssertionError error\nAgain, due to simplifying errors in JuliaSymbolics, we cannot shorten the resulting expression.We passed false as a second argument to simulate function which indicates a flag to not use simplify. As a result we have long expressions.As it so happens, in this example, simplify only fails for current I_T_3 (current of transmission line on node 3), and runs successfully for others.","category":"page"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"Dict{Any, Any} with 6 entries:\r\n  \"I_T_2\" => ((-(Ug*exp(-s*t) + (Ug*(R1*exp(-s*t) - Zc*exp(-s*t))*(1 + exp(-s*t))) / (-Zc - R1*(1 + exp(-s*t))))*(L1*s*…\r\n  \"V3\"    => -((L1*s*(Ug*exp(-s*t) + (Ug*(R1*exp(-s*t) - Zc*exp(-s*t))*(1 + exp(-s*t))) / (-Zc - R1*(1 + exp(-s*t))))) …\r\n  \"V2\"    => Ug + (-R1*((-(Ug*exp(-s*t) + (Ug*(R1*exp(-s*t) - Zc*exp(-s*t))*(1 + exp(-s*t))) / (-Zc - R1*(1 + exp(-s*t)…\r\n  \"I_Ug\"  => (-((R1*((-(Ug*exp(-s*t) + (Ug*(R1*exp(-s*t) - Zc*exp(-s*t))*(1 + exp(-s*t))) / (-Zc - R1*(1 + exp(-s*t))))…\r\n  \"I_T_3\" => (Ug*exp(-s*t) + (Ug*(R1*exp(-s*t) - Zc*exp(-s*t))*(1 + exp(-s*t))) / (-Zc - R1*(1 + exp(-s*t)))) / ((-(R1*…\r\n  \"V1\"    => Ug","category":"page"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"Voltage across L1 is the potential of node 3:","category":"page"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"V3 = simplify(result[\"V3\"])\r\nprintln(V3)","category":"page"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"(-L1*s*(-Ug*Zc*(exp(-s*t)^2) - 2Ug*Zc*exp(-s*t))) / (R1*Zc + Zc^2 + L1*R1*s + L1*Zc*s + R1*Zc*(exp(-s*t)^2) + R1*Zc*exp(-s*t) + L1*R1*s*exp(-s*t) + L1*Zc*s*(exp(-s*t)^2) - (Zc^2)*(exp(-s*t)^2) - L1*R1*s*(exp(-s*t)^2))","category":"page"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"We can still retrieve the current I_T_3 even though we can't simplify it:","category":"page"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"println(result[\"I_T_3\"])","category":"page"},{"location":"vod/","page":"Transmission line","title":"Transmission line","text":"(Ug*exp(-s*t) + (Ug*(R1*exp(-s*t) - Zc*exp(-s*t))*(1 + exp(-s*t))) / (-Zc - R1*(1 + exp(-s*t)))) / ((-(R1*exp(-s*t) - Zc*exp(-s*t))*(L1*s*exp(-s*t) - Zc*exp(-s*t))) / (-Zc - R1*(1 + exp(-s*t))) - Zc - L1*s)","category":"page"},{"location":"lit/#Linear-inductive-transformer","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"","category":"section"},{"location":"lit/#Circuit-description","page":"Linear inductive transformer","title":"Circuit description","text":"","category":"section"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"In this example we will examine a circuit with a linear inductive transformer.","category":"page"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"(Image: opamp)","category":"page"},{"location":"lit/#Goals","page":"Linear inductive transformer","title":"Goals","text":"","category":"section"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"Solve the circuit for given numerical values\nCalculate primary and secondary currents","category":"page"},{"location":"lit/#Modeling-the-circuit","page":"Linear inductive transformer","title":"Modeling the circuit","text":"","category":"section"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"First we include Symbolics.jl and CircuitS.","category":"page"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"using Symbolics\r\ninclude(\"../CircuitS.jl\")","category":"page"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"The we create the circuit and add all of the elements as shown in the picture above:","category":"page"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"circuit = create_circuit()\r\nadd_element([Resistor, \"R1\", 1, 3], circuit)\r\nadd_element([Resistor, \"R2\", 0, 2], circuit)\r\nadd_element([Voltage, \"Ug\", 3, 0], circuit)\r\nadd_element([InductiveT, \"LIT\", [1, 0], [2,0], [\"L1\", \"L2\", \"L12\"], [\"I1\", \"I2\"] ], circuit)","category":"page"},{"location":"lit/#Simulation","page":"Linear inductive transformer","title":"Simulation","text":"","category":"section"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"Unfortunately, due to JuliaSymbolics simplify errors, we cannot symbolically solve MNA system of equations for this circuit. Instead, we will pass in values for each component and apply the phasor transform s=j*w.","category":"page"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"We achieve this by passing a third parameter into init_circuit function, a string that represents w, and also a replacement for w inside the second argument with some numerical value (w=>1000 in this case).","category":"page"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"We will apply the following replacements:","category":"page"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"R_1 = 100 Omega \r\nR_2 = 100 Omega \r\nU_g = 5V \r\nL_1 = 1mu H \r\nL_2 = 1mu H \r\nL_3 = 05mu H \r\nI_1 = 50 mA \r\nI_2 = 0 \r\nomega = 1000","category":"page"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"After we've built everything, we initialise and simulate the circuit.","category":"page"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"@variables R1 R2 R L1 L2 L12 L I2 I1 Ug w\r\ninit_circuit(circuit, Dict([R1=>100, R2=>100, Ug=>5, L1=>1e-6, L2=>1e-6, L12=>5e-7, I1=>50e-3, I2=>0, w=>1000 ]), \"w\")\r\nresult = simulate(circuit)\r\n\r\nprintln(result)","category":"page"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"Dict{Any, Any} with 6 entries:\r\n  \"I_LIT_1\" => 0.05 - 5.0e-7im\r\n  \"V3\"      => 5.0\r\n  \"V2\"      => 5.0e-10 + 2.5e-5im\r\n  \"I_Ug\"    => 5.0e-7im - 0.05\r\n  \"I_LIT_2\" => -5.0e-12 - 2.5e-7im\r\n  \"V1\"      => 6.25e-10 + 5.0e-5im\r\n","category":"page"},{"location":"lit/","page":"Linear inductive transformer","title":"Linear inductive transformer","text":"note: Imaginary unit\nJulia uses im symbol for imaginary numbers, so you should avoid using said symbol as a circuit parameter.","category":"page"},{"location":"rparm/#R-parameters","page":"R-parameters","title":"R-parameters","text":"","category":"section"},{"location":"rparm/#Circuit-description","page":"R-parameters","title":"Circuit description","text":"","category":"section"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"Antoniou Gyrator grounded inductance simulating circuit using OVA and OTA are used in the design of multiple order High pass active filters in respect of their superiority in passing the signal from low frequency to extremely high frequency by using different configuration ","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"For the purpose of calculating R parameters, we've added two ideal current generators to nodes 0-1 and 3-2.","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"(Image: opamp)","category":"page"},{"location":"rparm/#Goals","page":"R-parameters","title":"Goals","text":"","category":"section"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"Solve the circuit with MNA\nCalculate Antoniou response U\nCalculate R parameters","category":"page"},{"location":"rparm/#Modeling-the-circuit","page":"R-parameters","title":"Modeling the circuit","text":"","category":"section"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"First we include Symbolics.jl and CircuitS.","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"using Symbolics\r\ninclude(\"../CircuitS.jl\")","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"Then we create the circuit and add all of the elements as shown in the picture above:","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"circuit = create_circuit()\r\nadd_element([Resistor, \"R1\", 4, 5], circuit)\r\nadd_element([Resistor, \"R2\", 3, 0], circuit)\r\nadd_element([Resistor, \"R3\", 1, 4], circuit)\r\nadd_element([Resistor, \"R4\", 5, 2], circuit)\r\nadd_element([Current, \"Ig1\", 0, 1], circuit)\r\nadd_element([Current, \"Ig2\", 3, 2], circuit)\r\nadd_element([OpAmp, \"OpAmp1\", [1, 5], 2], circuit)\r\nadd_element([OpAmp, \"OpAmp2\", [3, 5], 4], circuit)","category":"page"},{"location":"rparm/#Simulation","page":"R-parameters","title":"Simulation","text":"","category":"section"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"After we've built everything, we initialise and simulate the circuit:","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"init_circuit(circuit)\r\nresult = simulate(circuit)\r\n\r\nprintln(result)","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"Dict{Any, Any} with 7 entries:\r\n  \"V5\"       => -Ig2*R2\r\n  \"V3\"       => -Ig2*R2\r\n  \"V2\"       => (Ig1*R3*R4 - Ig2*R1*R2) / R1\r\n  \"I_OpAmp2\" => (-Ig1*(-R1 - R3)) / R1\r\n  \"V4\"       => -Ig2*R2 - Ig1*R3\r\n  \"I_OpAmp1\" => (Ig2*R1 - Ig1*R3) / R1\r\n  \"V1\"       => -Ig2*R2","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"Antoniou response is the voltage of node 3:","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"println(result[\"V3\"])","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"-Ig2*R2","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"R parameters are defined as:","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"beginbmatrix\r\nu_1 \r\nu_2\r\nendbmatrix\r\n=\r\nbeginbmatrix\r\nr_11  r_12  \r\nr_21  r_22 \r\nendbmatrix\r\nbeginbmatrix\r\ni_1 \r\ni_2\r\nendbmatrix","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"i_1 and i_2 are currents from our current sources, so all we have to do is calculate the voltage on those generators:","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"println(result[\"V1\"])\r\n\r\nprintln( simplify(result[\"V2\"]-result[\"V3\"], expand=true) )","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"-Ig2*R2\r\n(Ig1*R3*R4) / R1","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"And in matrix form:","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"beginbmatrix\r\nu_1 \r\nu_2\r\nendbmatrix\r\n=\r\nbeginbmatrix\r\n0  -R_2  \r\nfracR_3R_4R_1  0 \r\nendbmatrix\r\nbeginbmatrix\r\ni_1 \r\ni_2\r\nendbmatrix","category":"page"},{"location":"rparm/","page":"R-parameters","title":"R-parameters","text":"note: Simplify\nThe simplify function applies a built-in set of rules to rewrite expressions in order to simplify them.","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"#About","page":"Introduction","title":"About","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"CircuitS is a library written in Julia programming language for solving linear, time-invariant electric circuits. Using JuliaSymbolics library as a computer algebra system and for solving linear equations, CircuitS successfully simulates and solves simple electric circuits.","category":"page"},{"location":"#Why-CircuitS?","page":"Introduction","title":"Why CircuitS?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Written in a high-level, high-performance, dynamic programming language\nOpen-source code licensed under GPLv3 \nGUI Extension that offers a user-friendly way to create and modify circuits\nCompletely modular code. Ability to include it in other projects easily\nLarge set of examples and video explanations","category":"page"},{"location":"#Algorithm","page":"Introduction","title":"Algorithm","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"CircuitS uses modified nodal analysis to solve electric circuits. MNA is an extension of nodal analysis which not only determines the circuit's node voltages (as in classical nodal analysis), but also some branch currents. Modified nodal analysis was developed as a formalism to mitigate the difficulty of representing voltage-defined components in nodal analysis (e.g., voltage-controlled voltage sources).","category":"page"},{"location":"#Limits","page":"Introduction","title":"Limits","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Julia, as a relatively new language, offers modern and efficient solutions to classic programming problems, but it does come at a cost. Lack of testing and support for its symbolic library is reflected in this project and will be discussed further in detail.","category":"page"},{"location":"#Authors","page":"Introduction","title":"Authors","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Stevo Mitrić\nFilip Drobnjaković","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"University of Belgrade, School of Electrical Engineering","category":"page"},{"location":"#Acknowledgment","page":"Introduction","title":"Acknowledgment","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"We thank Prof. dr Dejan V. Tošić and Prof. dr Milka M. Potrebić for recommending this software project to us and for all discussions and help with the project.","category":"page"}]
}
